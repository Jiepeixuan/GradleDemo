//1.1

task hello{
    doLast{
        println 'Hello World'
    }
}

// 使用gradle -q hello   去执行


// 日志
// ERROR        错误消息
// QUIET        重要消息
// WARNNING     警告消息
// LIFECYCLE    进度消息
// INFO         信息消息
// DEBUG        调试消息

//2.1 字符串

task printStringClass {
    doLast{
        def str1 = '单引号'
        def str2 = "双引号"

        println "单引号定义的字符串类型："+str1.getClass().name
        println "双引号定义的字符串类型："+str2.getClass().name
    }
    
}

// ./gradlew printStringClass 
// 单引号定义的字符串类型：java.lang.String
// 双引号定义的字符串类型：java.lang.String

task printStringVAr {
    doLast{
        def name = "张三"

        println '单引号的变量计算：${name}'
        println "双引号的变量计算：${name}"
        println "双引号的变量计算：$name"
    }
}

// 单引号的变量计算：${name}
// 双引号的变量计算：张三
// 双引号的变量计算：张三

//2.2集合

//2.2.1 List

task printList {
    doLast{
        def numList = [1,2,3,4,5,6]
        println numList.getClass().name

        println numList[1]      //访问第二个元素
        println numList[-1]     //访问最后一个元素
        println numList[-2]     //访问倒数第二个元素
        println numList[1..3]   //访问第二个到第四个元素

        numList.each {
            println it
        }
    }
}

//2.2.2 Map

task printlnMap {
    doLast{
        def map1 = ['width':1024,'height':768]
        println map1.getClass().name

        println map1['width']
        println map1.height

        map1.each {
            println "Key:${it.key},Value:${it.value}"
        }
    }
}

//2.3方法

//2.3.1 括号是可以省略了

task invokeMethod {
    doLast{
        method1(1,2)
        method1 1,2
    }
}

def method1(int a,int b){
    println a+b
}

//2.3.2 return是可以不写的

task printMethodReturn {
    doLast{
        def add1 = method2 1,2
        def add2 = method2 5,3
        println "add1:  ${add1},add2:   ${add2}"
    }  
}

def method2 (int a, int b){
    if(a>b){
        a
    }else{
        b
    }
}

//2.3.3 代码块可以作为参数传递

// numList.each({println it})

// numList.each({
//     println it
// })

// //如果最后一个参数是闭包，可以放到方法外面
// numList.each(){
//     println it
// }

// //然后方法可以省略
// numList.each {
//     println it
// }

//2.4   JavaBean

task helloJavaBean {
    doLast{
        Person1 p = new Person1()

        println "名字是： ${p.name}"
        p.name = "张三"
        println "名字是： ${p.name}"
        println "年龄是： ${p.age}"
    }  
}

class Person1 {
    private String name

    public int getAge(){
        12
    }
}

//2.5 闭包

//2.5.1
task helloClosure << {
    customEach {
        println it
    }
}

def customEach(colsure){
    for(int i in 1..10){
        colsure(i)
    }
}

//2.5.2 向闭包传递参数

task helloClosure2 << {
    eachMap {k,v ->
        println "${k} is ${v}"
    }
}

def eachMap(colsure){
    def map1 = ["name":"张三",“age”:"18"]
    map1.each {
        colsure(it.key,it.value)
    }
}

//2.5.3 闭包委托

task helloDelegate << {
    new Delegate().test{
        println "thisObject:${thisObject.getClass()}"
        println "owner:${owner.getClass()}"
        println "delegate:${delegate.getClass()}"
        method1()
        it.method1()
    }
}

def method1(){
    println "Delegate this:${this.getClass()} in root"
    println "method1 in root"
}

class Delegate {
    def method1(){
        println "Delegate this:${this.getClass()} in Delegate"
        println "method1 in Delegate"
    }
    def test(Closure<Delegate> colsure){
        colsure(this)
    }
}




task configClosure << {
    person {
        personName = "张三"
        personAge = 20
        dumpPerson()
    }
}

class Person {
    String personName
    int personAge

    def dumpPerson(){
        println "name is ${personName},age is ${personAge}"
    }
}

def person(Closure<Person> closure){
    Person p = new Person();
    closure.delegate = p;
    //委托模式优先
    closure.setResolveStrategy(Closure.DELEGATE_FIRST);
    closure(p)
}


//3.4 创建一个任务

task customTask1 {
    doFirst {
        println "customTask1:doFirst"
    }
    doLast {
        println "customTask1:doLast"
    }
}

tasks.create("customTask2") {
    doFirst {
        println "customTask2:doFirst"
    }
    doLast {
        println "customTask2:doLast"
    }
}

//3.5 任务依赖

task ex35Hello << {
    println 'hello'
}

task ex35World << {
    println 'world'
}

task ex35Main(dependsOn: ex35Hello) {
    doLast {
        println 'main'
    }
}

task ex35MultiTask {
    dependsOn ex35Hello,ex35World
    doLast {
        println 'multiTask'
    }
}

//3.6 任务间通过API控制、交互

task ex36Hello << {
    println 'dowLast1'
}

ex36Hello.doFirst {
    println 'dowFirst'
}

ex36Hello.doLast {
    println project.hasProperty('ex36Hello')
    println 'dowLast2'
}

//3.7 自定义属性

apply plugin: "java"

//自定义一个Project的属性
ext.age = 18

//通过代码块同时自定义多个属性
ext {
    phone = 1334512
    address = ''
}

sourceSets.all {
    ext.resourcesDir = null
}

sourceSets {
    main {
        resourcesDir = 'main/res'
    }
    test {
        resourcesDir = 'test/res'
    }
}

task ex37CustomProperty << {
    println "年龄是：${age}"
    println "电话是：${phone}"
    println "地址是：${address}"

    sourceSets.each {
        println "${it.name}的resourcesDir是：${it.resourcesDir}"
    }
}

//3.8 脚本即代码，代码也是脚本

def buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}

//4.1多种方式创建任务

//1
def Task ex41CreateTask1 = task(ex41CreateTask1)

ex41CreateTask1.doLast {
    println "创建方法原型为：Task task(String name) throws InvalidUserDataException"
}

//2
//任务分组，类似AS右侧任务归类
def Task ex41CreateTask2 = task(ex41CreateTask2,group: BasePlugin.BUILD_GROUP)

ex41CreateTask2.doLast {
    println "创建方法原型为：Task task(String name,Map<String,?> args) throws InvalidUserDataException"
    println "任务分组：${ex41CreateTask2.group}"
}

//3
task ex41CreateTask3 {
    description '演示任务创建'
    doLast {
        println "创建方法原型为：Task task(String name,Closure configureClosure)"
        println "任务描述：${description}"
    }
}

//4.2 多种方式访问任务

//1
task ex42AccessTask1

ex42AccessTask1.doLast {
    println 'ex42AccessTask1.doLast'
}

//2
//在Groovy中 []不是表示数组，如a[b]对应的是 a.getAt(b)
task ex42AccessTask2

tasks['ex42AccessTask2'].doLast {
    println 'ex42AccessTask2.doLast'
}

//3
//通过路径访问。用过路径访问有两种方式，一种是get,一种是find,区别在于get的时候找不到任务会抛出UnknownTaskException,find在找不到任务的时候会返回null

task ex42AccessTask3
tasks['ex42AccessTask3'].doLast {
    println tasks.findByPath('ex42AccessTask3')
    println tasks.getByPath('ex42AccessTask3')
    println tasks.findByPath('asdf')
}

//4
//通过名称访问
task ex42AccessTask4
tasks['ex42AccessTask4'].doLast {
    println tasks.findByName('ex42AccessTask4')
    println tasks.getByName('ex42AccessTask4')
    println tasks.findByName('asdf')
}

//4.3任务分组和描述

def Task myTask = task ex43GroupTask
myTask.group = BasePlugin.BUILD_GROUP
myTask.description = '这是一个构建的引导任务'

myTask.doLast {
    println "group:${group},description:${description}"
}

4.4 << 操作符